<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!--Window/Server action to display Inventory based on the Sale Order Line-->
    <record model="ir.actions.act_window" id="action_window_so_line_quants">
      <field name="name">Inventory by Store</field>
      <field name="res_model">stock.quant</field>
      <field name="groups_id" eval="[(6, 0, [])]"/>
      <field name="auto_search" eval="True"/>
      <field name="context">{'search_default_internal_loc':1,'group_by':['location_id','product_id']}</field>
      <field name="limit">80</field>
      <field name="target">current</field>
      <field name="type">ir.actions.act_window</field>
      <field name="view_mode">tree,form,pivot</field>
    </record>
    <record model="ir.actions.server" id="action_server_so_line_quants">
      <field name="model_id" ref="sale.model_sale_order_line"/>
      <field name="name">[JOS] Call Window Action: sm_custo_ps.action_window_so_line_quants</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
action_data = env.ref('sm_custo_ps.action_window_so_line_quants').read()[0]
action_data.update({'domain':[('product_id','=',record.product_id.id)]})
action = action_data
        ]]>
      </field>
    </record>
    <!--Server action to update the fiscal position on the sale.order on creation.-->
    <record model="ir.actions.server" id="action_server_fiscal_so_update">
      <field name="model_id" ref="sale_stock.model_sale_order"/>
      <field name="name">[JOS] Set Team Fiscal Position on Creation/Update</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
if record.team_id.x_fiscal_position_id:
  record['fiscal_position_id'] = record.team_id.x_fiscal_position_id
        ]]>
      </field>
    </record>
    <record  model="base.automation" id="auto_action_fiscal_so_update">
      <field name="name">[JOS] Set Team Fiscal Position on Creation/Update</field>
      <field name="active" eval="True"/>
      <field name="model_id" ref="sale_stock.model_sale_order"/>
      <field name="sequence" eval="2"/>
      <field name="trigger">on_create_or_write</field>
      <field name="action_server_id" eval="ref('action_server_fiscal_so_update')"/>
    </record>
    <!--Server action to set correct sales journal based on the team-->
    <record model="ir.actions.server" id="action_server_journal_invoice">
      <field name="model_id" ref="account.model_account_invoice"/>
      <field name="name">[JOS] Set Journal on Invoice Creation</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
if record.team_id.x_journal_id:
  record['journal_id'] = record.team_id.x_journal_id
        ]]>
      </field>
    </record>
    <record  model="base.automation" id="auto_action_journal_invoice">
      <field name="name">[JOS] Set Journal on Invoice Creation</field>
      <field name="active" eval="True"/>
      <field name="model_id" ref="account.model_account_invoice"/>
      <field name="sequence" eval="2"/>
      <field name="trigger">on_create</field>
      <field name="action_server_id" eval="ref('action_server_journal_invoice')"/>
    </record>
    <!--Assign analytic account to each journal item-->
    <record model="ir.actions.server" id="action_server_analytic_journal_item">
      <field name="model_id" ref="account.model_account_move_line"/>
      <field name="name">[JOS] Set Analytic Account on Journal Item</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
if record.journal_id.x_analytic_account_id:
  record['analytic_account_id'] = record.journal_id.x_analytic_account_id
else:
  raise Warning('Configuration Error: Missing Analytic Account in Sales Journal for Store')
        ]]>
      </field>
    </record>
    <record  model="base.automation" id="auto_action_analytic_journal_item">
      <field name="name">[JOS] Set Analytic Account on Journal Item</field>
      <field name="active" eval="True"/>
      <field name="model_id" ref="account.model_account_move_line"/>
      <field name="sequence" eval="2"/>
      <field name="trigger">on_create_or_write</field>
      <field name="action_server_id" eval="ref('action_server_analytic_journal_item')"/>
    </record>
    <!--Action to auto validate transfers on confirmation of SO for specified auto teams-->
    <record model="ir.actions.server" id="action_server_confirm_sale">
      <field name="model_id" ref="sale_stock.model_sale_order"/>
      <field name="name">[JOS] Actions on Confirmation of Sale Order </field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
record.action_confirm()
if record.team_id.x_automate == True:
  for picking in record.picking_ids:
    if picking.state == 'assigned':
      for pack in picking.pack_operation_ids:
          if pack.product_id.product_tmpl_id.tracking in ['serial','lot']:
              so_line = record.order_line[0]
              entered_lot = env['stock.production.lot'].search([('name','ilike',so_line.x_serial)],limit=1)
              if entered_lot:
                pack.pack_lot_ids[0].write({'lot_id': entered_lot.id})
                #raise Warning(pack.pack_lot_ids[0].lot_id)
                pack.pack_lot_ids[0].do_plus()
              else:
                raise Warning('No Serial # found')
          else:
              if pack.product_qty > 0:
                  pack.write({'qty_done': pack.product_qty})
              else:
                  pack.unlink()
      if all(pack2.product_qty == pack2.product_qty for pack2 in picking.pack_operation_ids):
          picking.do_new_transfer()
  record.action_invoice_create()
  for invoice in record.invoice_ids:
    invoice.action_invoice_open()
    #payment_vals = {
    #    'journal_id': record.team_id.x_payment_journal_id.id,
    #    'payment_method_id': 1,
    #    'payment_date': datetime.datetime.now().strftime('%Y-%m-%d'),
    #    'communication': invoice.number,
    #    'invoice_ids': [(6, 0, [invoice.id])],
    #    'payment_type': 'inbound',
    #    'amount': '%.2f' % invoice.amount_total,
    #    'currency_id': invoice.currency_id.id,
    #    'partner_id': invoice.partner_id.id,
    #    'partner_type': 'customer',
    #}
    #raise Warning(str(payment_vals))
    #payment = env['account.payment'].create(payment_vals)
    #payment.post()
        ]]>
      </field>
    </record>
</odoo>
