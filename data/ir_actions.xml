<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!--Window/Server action to display inventory based on the Sale Order Line-->
    <record model="ir.actions.act_window" id="action_window_so_line_quants">
      <field name="name">Inventory by Store</field>
      <field name="res_model">stock.quant</field>
      <field name="groups_id" eval="[(6, 0, [])]"/>
      <field name="auto_search" eval="True"/>
      <field name="context">{'search_default_internal_loc':1,'group_by':['location_id','product_id']}</field>
      <field name="limit">80</field>
      <field name="target">current</field>
      <field name="type">ir.actions.act_window</field>
      <field name="view_mode">tree,form,pivot</field>
    </record>
    <record model="ir.actions.server" id="action_server_so_line_quants">
      <field name="model_id" ref="sale.model_sale_order_line"/>
      <field name="name">[JOS] Call Window Action: sm_custo_ps.action_window_so_line_quants</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
action_data = env.ref('sm_custo_ps.action_window_so_line_quants').read()[0]
action_data.update({'domain':[('product_id','=',record.product_id.id)]})
action = action_data
        ]]>
      </field>
    </record>
    <record model="ir.actions.server" id="action_server_confirm_sale">
      <field name="model_id" ref="sm_custo_ps.payment_method_wizard"/>
      <field name="name">[JOS] Actions on Confirmation of Sale Order </field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
if record.x_paylater == True:
  record.x_order_id.action_confirm()
else:
  record.x_order_id.action_confirm()
  if record.x_order_id.team_id.x_automate == True:
    for picking in record.x_order_id.picking_ids:
      operation = record.env['ir.model.data'].sudo().get_object('sm_custo_ps', 'op_trade_in_hq')
      if picking.picking_type_id.id == operation.id:
        picking.action_cancel()
      else:
        if picking.state == 'assigned': #and picking.location_dest_id.usage != 'internal':
          for move in picking.move_lines:
              if move.product_id.product_tmpl_id.tracking in ['serial','lot']:
                  so_line = record.x_order_id.order_line.filtered(lambda r: r.product_id == move.product_id)[0]
                  entered_lot = env['stock.production.lot'].search([('name','ilike',so_line.x_serial)],limit=1)
                  if entered_lot:
                    move.move_line_ids[0].write({'lot_id': entered_lot.id})
                    #move.pack_lot_ids[0].do_plus()
                  else:
                    raise Warning('No Serial # found')
              else:
                  if move.product_qty > 0:
                      move.write({'qty_done': move.product_qty})
                  #else:
                  #    move.unlink()
          if all(move2.product_uom_qty == move2.quantity_done for move2 in picking.move_lines):
              picking.button_validate()
    record.x_order_id.action_invoice_create()
    for invoice in record.x_order_id.invoice_ids:
      invoice.action_invoice_open()
      payment_vals = {
          'journal_id': record.x_journal_id.id,
          'payment_method_id': 1,
          'payment_date': datetime.datetime.now().strftime('%Y-%m-%d'),
          'communication': invoice.number,
          'invoice_ids': [(6, 0, [invoice.id])],
          'payment_type': 'inbound',
          'amount': '%.2f' % invoice.amount_total,
          'currency_id': invoice.currency_id.id,
          'partner_id': invoice.partner_id.id,
          'partner_type': 'customer',
      }
      payment = env['account.payment'].create(payment_vals)
      payment.post()
        ]]>
      </field>
    </record>
    <record model="ir.ui.view" id="view_payment_method_wizard">
      <field name="name">x_jos.payment.method.wizard.form</field>
      <field name="model">x_order.payment.wizard</field>
      <field name="mode">primary</field>
      <field name="inherit_id" eval="False"/>
      <field name="arch" type="xml">
        <form>
              <strong><p>Please Select Payment Method</p></strong>
              <group>
                  <field name="x_journal_id"/>
                  <field name="x_order_id" invisible="1"/>
                  <field name="x_paylater"/>
              </group>
              <footer>
                  <button string="Confirm" type="action" name="%(action_server_confirm_sale)d" class="oe_highlight"/> or
                  <button string="Cancel" special="cancel" class="oe_link"/>
              </footer>
          </form>
      </field>
      <field name="priority">15</field>
    </record>
    <record model="ir.actions.act_window" id="action_payment_method_wizard">
      <field name="auto_search" eval="True"/>
      <field name="context">{}</field>
      <field name="groups_id" eval="[(6, 0, [])]"/>
      <field name="limit">80</field>
      <field name="name">Enter Payment Method</field>
      <field name="res_model">x_order.payment.wizard</field>
      <field name="target">new</field>
      <field name="type">ir.actions.act_window</field>
      <field name="view_id" ref="sm_custo_ps.view_payment_method_wizard"/>
      <field name="view_ids" eval="[(6, 0, [])]"/>
      <field name="view_mode">form</field>
      <field name="view_type">form</field>
    </record>
    <record model="ir.actions.server" id="action_pre_sales_confirm">
      <field name="crud_model_id" eval="False"/>
      <field name="help" eval="False"/>
      <field name="link_field_id" eval="False"/>
      <field name="model_id" ref="sale.model_sale_order"/>
      <field name="name">[JOS] Pre Confirm Sale Order</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="child_ids" eval="[(6, 0, [])]"/>
      <field name="code"><![CDATA[
action_data = env.ref('sm_custo_ps.action_payment_method_wizard').read()[0]
action_data.update({'context': {'default_x_order_id': record.id}})
action = action_data
        ]]>
      </field>
    </record>
    <!--Window/Server action to go to child contact's res.partner.form-->
    <record model="ir.actions.act_window" id="action_window_open_child_contact">
      <field name="name">Contacts (Child)</field>
      <field name="res_model">res.partner</field>
      <field name="groups_id" eval="[(6, 0, [])]"/>
      <field name="auto_search" eval="True"/>
      <field name="context">{}</field>
      <field name="limit">80</field>
      <field name="target">current</field>
      <field name="type">ir.actions.act_window</field>
      <field name="view_mode">form</field>
    </record>
    <record model="ir.actions.server" id="action_server_open_child_contact">
      <field name="model_id" ref="point_of_sale.model_res_partner"/>
      <field name="name">[JOS] Call Window Action: Open Child Partner Form</field>
      <field name="sequence">5</field>
      <field name="state">code</field>
      <field name="code"><![CDATA[
contact = record.id
action_data = env.ref('sm_custo_ps.action_window_open_child_contact').read()[0]
action_data.update({'res_id': contact})
action = action_data
        ]]>
      </field>
    </record>
</odoo>
